name: Build Action
on:
    push:
      tags:
        - "v*.*.*"
    pull_request:
      branches:
        - master
jobs:
  build-bionic:
    runs-on: ubuntu-latest
    steps:
      - 
        name: clone
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - 
        name: build
        # The bionic build is run with docker-run-action because standard GitHub actions
        # use node20 which can't run on bionic
        # ToDo: verify this will error out properly on failure
        uses: addnab/docker-run-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          image: ghcr.io/aphysci/gravity_base:bionic
          shell: bash
          options: -v ${{ github.workspace }}:/home/aps/git/gravity -u aps
          run: |
            echo $(cat /etc/lsb-release)
            cd ~/git/gravity
            ls -lh
            pwd
            mkdir build && cd build
            pwd
            cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release -GNinja ..
            cmake --build . --target install --parallel
            LD_LIBRARY_PATH=/home/aps/git/gravity/build/install/lib ./install/bin/ServiceDirectory &
            ctest --verbose && mkdir output
            ln -sf ./install ./gravity && tar -czvhf ./output/gravity-$(cat ./install/VERSION.txt)-bionic_amd64.tar.gz ./gravity
            echo "tarball is: gravity-$(cat ./install/VERSION.txt)-bionic_amd64.tar.gz"
      - 
        name: upload
        uses: actions/upload-artifact@v4
        with:
          name: gravity-bionic
          path: ${{ github.workspace }}/build/output/*.tar.gz
  build-focal:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/aphysci/gravity_base:focal
    steps:
      -
        name: clone
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      -
        name: build
        run: |
          echo $(cat /etc/lsb-release)
          pwd
          git config --global --add safe.directory '*'
          mkdir build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release -GNinja ..
          cmake --build . --target install --parallel
          LD_LIBRARY_PATH=`pwd`/install/lib ./install/bin/ServiceDirectory &
          ctest --verbose
          mkdir output
          ln -sf ./install ./gravity && tar -czvhf ./output/gravity-$(cat ./install/VERSION.txt)-focal_amd64.tar.gz ./gravity
          echo "tarball is: gravity-$(cat ./install/VERSION.txt)-focal_amd64.tar.gz"
      - 
        name: upload
        uses: actions/upload-artifact@v4
        with:
          name: gravity-focal
          path: ${{ github.workspace }}/build/output/*.tar.gz
  build-jammy:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/aphysci/gravity_base:jammy
    steps:
      -
        name: clone
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      -
        name: build
        run: |
          echo $(cat /etc/lsb-release)
          pwd
          git config --global --add safe.directory '*'
          mkdir build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release -GNinja ..
          cmake --build . --target install --parallel
          LD_LIBRARY_PATH=`pwd`/install/lib ./install/bin/ServiceDirectory &
          ctest --verbose
          mkdir output
          ln -sf ./install ./gravity && tar -czvhf ./output/gravity-$(cat ./install/VERSION.txt)-jammy_amd64.tar.gz ./gravity
          echo "tarball is: gravity-$(cat ./install/VERSION.txt)-jammy_amd64.tar.gz"
      - 
        name: upload
        uses: actions/upload-artifact@v4
        with:
          name: gravity-jammy
          path: ${{ github.workspace }}/build/output/*.tar.gz
  build-alma:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/aphysci/gravity_base:alma
    steps:
      -
        name: clone
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      -
        name: build
        run: |
          echo $(cat /etc/os-release)
          pwd
          git config --global --add safe.directory '*'
          mkdir build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release -GNinja ..
          cmake --build . --parallel
          LD_LIBRARY_PATH=`pwd`/install/lib ./install/bin/ServiceDirectory &
          pushd gravity_external_examples-prefix/src/gravity_external_examples-build && ctest --verbose
          popd
          mkdir output
          ln -sf ./install ./gravity && tar -czvhf ./output/gravity-$(cat ./install/VERSION.txt)-alma_amd64.tar.gz ./gravity
          echo "tarball is: gravity-$(cat ./install/VERSION.txt)-alma_amd64.tar.gz"
      - 
        name: upload
        uses: actions/upload-artifact@v4
        with:
          name: gravity-alma
          path: ${{ github.workspace }}/build/output/*.tar.gz
  build-windows:
    runs-on: windows-latest
    steps:
      - 
        name: clone
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - 
        name: build
        run: |
          python-3.12 -m pip install --upgrade setuptools
          mkdir build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=install  -G"Visual Studio 17 2022" -A x64 ..
          cmake --build . --config Release
      - 
        name: fail log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gravity-windows-fail-log
          path: ${{ github.workspace }}/build/py-protobufs-external-prefix/src/py-protobufs-external-stamp/py-protobufs-external-build-*.log
      
